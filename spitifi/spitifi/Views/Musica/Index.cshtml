@using spitifi.Models.DbModels
@model Page<spitifi.Models.DbModels.Musica>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Index";
    // since the page model isn't the music dbModel but a paginator, we can't access the music displayname from anywhere
    // this dumbItem allows to use the Musica Model attributes
    var dumbitem = new Musica();

    var j = 1;
}

<h1 style="padding-bottom: 30px">Músicas</h1>

<table class="table table-borderless">
    <thead style="border-bottom: 2px solid #eeeeee;">
    <tr style="font-size: 16px">
        <td>#</td>
        <td>Titulo</td>
        <td>Álbum</td>
        <td>Reproduzir</td>
        <td>Gostos</td>
    </tr>
    </thead>
    <div class="table-bordered"></div>
    <tbody class="col-sm-10">
    @foreach (var item in Model)
    {
        <tr data-song-id="@item.Id"
            data-song-name="@item.Nome"
            data-album-art="@item.Album.Foto"
            data-artist="@item.Dono.Username"
            data-file-path="@item.FilePath">
            
            <td style="padding-top: 30px">@j</td>
            
            <td class="d-flex align-items-center">
                <img style="max-height: 70px; max-width: 70px" src="/@item.Album.Foto" alt=""
                     onerror="this.onerror=null; this.src='/assets/icons/musicPlaceholder.png'"/>

                <div style="margin-left: 10px; font-size: 14px">
                    <li class="flex-column" style="margin-bottom: 5px"><strong>@item.Nome</strong></li>
                </div>
            </td>
            
            <td>@item.Album.Titulo</td>
            <td>
                <audio controls class="flex-column">
                    <source src="/@item.FilePath" type="audio/wav">
                    <source src="/@item.FilePath" type="audio/mpeg">
                </audio>
            </td>

            <td>
                @if (User.Identity.IsAuthenticated)
                {
                    <!-- Add data attribute for initial liked state -->
                    <img id="heart-@item.Id"
                         src="@(item.ListaGostos.Any(g => g.Utilizador.Username == User.Identity.Name) ? "/assets/icons/heart_filled.png" : "/assets/icons/heart_empty.png")"
                         onclick="updateGosto(@item.Id)"
                         style="cursor: pointer; width: 24px; height: 24px;"
                         data-liked="@(item.ListaGostos.Any(g => g.Utilizador.Username == User.Identity.Name).ToString().ToLower())"/>
                }
                <p id=@("foto" + item.Id)>@item.ListaGostos.Count()</p>

            </td>
            <td>
                <a asp-action="Details" asp-route-id="@item.Id">Detalhes</a>
            </td>
        </tr>
        j++;
    }
    </tbody>
</table>

<!-- controlos de paginação -->
<div class="pagination-squares">
    @if (Model.HasPreviousPage)
    {
        <a asp-action="Index"
           asp-route-pageNumber="1"
           asp-route-pageSize="@Model.PageSize"
           title="First Page">
            &laquo;
        </a>
    }
    
    @for (int i = 1; i <= Model.TotalPages; i++)
    {
        <a asp-action="Index"
           asp-route-pageNumber="@i"
           asp-route-pageSize="@Model.PageSize"
           class="@(i == Model.PageIndex ? "active" : "")">
            @i
        </a>
    }
    
    @if (Model.HasNextPage)
    {
        <a asp-action="Index"
           asp-route-pageNumber="@Model.TotalPages"
           asp-route-pageSize="@Model.PageSize"
           title="Last Page">
            &raquo;
        </a>
    }
</div>

<style>
    .pagination-squares {
        display: flex;
        gap: 5px;
        flex-wrap: wrap;
        margin: 15px 0;
    }

    .pagination-squares a {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 35px;
        height: 35px;
        background-color: #333;
        color: white;
        text-decoration: none;
        border-radius: 4px;
        transition: all 0.3s ease;
    }

    .pagination-squares a:hover {
        background-color: #444;
        transform: translateY(-2px);
    }

    .pagination-squares a.active {
        background-color: #1DB954;
        font-weight: bold;
        transform: scale(1.1);
    }
</style>
<style>
    select[name="pageSize"] {
        background-color: #333;
        color: white;
        padding: 8px 12px;
        border: 1px solid #555;
        border-radius: 4px;
        cursor: pointer;
    }

    select[name="pageSize"] option {
        background-color: #444;
        color: white;
    }

    select[name="pageSize"]:focus {
        outline: none;
        border-color: #1db954;
        box-shadow: 0 0 0 2px rgba(29, 185, 84, 0.25);
    }
    select[name="pageSize"] option:hover {
        background-color: #1DB954 !important;
    }
</style>
<form asp-action="Index" method="get">
    <label>Músicas por página: </label>
    <select name="pageSize" onchange="this.form.submit()">
        <option value="5" selected="@(Model.PageSize == 5)">5</option>
        <option value="10" selected="@(Model.PageSize == 10)">10</option>
        <option value="25" selected="@(Model.PageSize == 25)">25</option>
        <option value="50" selected="@(Model.PageSize == 50)">50</option>
    </select>
    <input type="hidden" name="pageNumber" value="1"/>
</form>


<script>

    // Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
    // for details on configuring this project to bundle and minify static web assets.

    document.addEventListener('DOMContentLoaded', function() {
        const rows = document.querySelectorAll('tbody tr');

        const albumRows = document.querySelectorAll('dl dd');

        rows.forEach(row => {
            row.addEventListener('click', function(event) {
                // ignora clicks em butões dentro da musica
                // exemplo: botao do like esta dentro do espaço do event listener par alterar musica
                // chutar like na musica não deve alterar para a musica
                if (event.target.closest('img[id^="heart-"]')) return;
                if (event.target.closest('audio')) return;

                const playlist = buildPlaylist();
                const songId = row.dataset.songId;

                // encontra indice da musica no array de musicas
                const songIndex = playlist.findIndex(song => song.id === songId);
                if (songIndex === -1) return;

                // inicializa musicaPlayer. Feito somente 1 vez
                if (!window.musicPlayer) {
                    initPlayer(playlist);
                }
                window.musicPlayer.playTrack(songIndex);
            });
        });
    });

    // funcao para inicializar o musicPlayer. Corre quando a pagina é carregada
    function initPlayer(playlist) {
        window.musicPlayer = {
            playlist: playlist,
            currentIndex: 0,
            audioPlayer: document.getElementById('footerAudioPlayer'),
            playMode: 'once',

            playTrack: function(index) {
                // validação inicial do indice
                if (index < 0 || index >= this.playlist.length) return;

                this.currentIndex = index;
                const track = this.playlist[index];

                // troca informações do footer de acordo com a nova musica
                document.getElementById('footerSongName').textContent =
                    track.name;
                document.getElementById('footerArtist').textContent = track.artist;
                document.getElementById('footerAlbumArt').src = track.albumArt;

                // atualiza path da musica. Cada indice contem o seu proprio path para a musica (no wwwroot)
                this.audioPlayer.innerHTML = '';
                const source = document.createElement('source');
                source.src = track.filePath;

                if (track.filePath.endsWith('.wav')) {
                    source.type = 'audio/wav';
                } else if (track.filePath.endsWith('.mp3')) {
                    source.type = 'audio/mp3';
                }

                this.audioPlayer.appendChild(source);
                this.audioPlayer.load();
                this.audioPlayer.play();

                // mostra footer. Escondido, por padrão
                const container = document.getElementById('audioContainer');
                container.classList.add('show');

            },

            // passa para a musica seguinte
            nextTrack: function() {
                let nextIndex = this.currentIndex + 1;

                if (nextIndex >= this.playlist.length) {
                    if (this.playMode === 'loopPlaylist') nextIndex = 0;
                    else return; // Stop at end
                }
                this.playTrack(nextIndex);
            },

            // passa para a musica anterior
            prevTrack: function() {
                let prevIndex = this.currentIndex - 1;

                if (prevIndex < 0) {
                    if (this.playMode === 'loopPlaylist') prevIndex = this.playlist.length - 1;
                    else return; // Stop at start
                }
                this.playTrack(prevIndex);
            },

            setPlayMode: function(mode) {
                this.playMode = mode;
                this.audioPlayer.loop = (mode === 'loopTrack');
            }
        };

        // modo padrão
        window.musicPlayer.setPlayMode('once');

        // adiciona eventListeners nos botões para saltar para musica anterior ou seguinte
        document.getElementById('musicaAnteriorBt').addEventListener('click', () => {
            window.musicPlayer.prevTrack();
        });

        document.getElementById('musicaSeguinteBt').addEventListener('click', () => {
            window.musicPlayer.nextTrack();
        });

        // escuta por mudanças na escolha do modo de playback (once, repeat, loop)
        document.querySelectorAll('input[name="playMode"]').forEach(radio => {
            radio.addEventListener('change', (e) => {
                window.musicPlayer.setPlayMode(e.target.value);
            });
        });

        // trata quando musica chega ao fim
        window.musicPlayer.audioPlayer.addEventListener('ended', () => {
            if (window.musicPlayer.playMode === 'loopPlaylist' || window.musicPlayer.playMode === 'once') {
                window.musicPlayer.nextTrack();
            }
        });
    }
    
    // build playlist from current page
    function buildPlaylist() {
        const playlist = [];
        const rows = document.querySelectorAll('tbody tr');

        rows.forEach(row => {
            playlist.push({
                id: row.dataset.songId,
                name: row.dataset.songName,
                albumArt: row.dataset.albumArt,
                artist: row.dataset.artist,
                filePath: row.dataset.filePath
            });
        });

        return playlist;
    }


    <!-- script para fazer a ligação ao webSocket-->

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/likes")
        .withAutomaticReconnect()
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function start() {
        try {
            await connection.start();

            // Existing count update handler
            connection.on("AtualizarGostos", (idMusica, numGostos) => {
                document.getElementById("foto" + idMusica).innerHTML = numGostos;
            });

            // Like state update handler
            connection.on("AtualizarGostoState", (idMusica, isLiked) => {
                const heart = document.getElementById(`heart-${idMusica}`);
                if (heart) {
                    heart.src = isLiked ? "/assets/icons/heart_filled.png" : "/assets/icons/heart_empty.png";
                    heart.dataset.liked = isLiked.toString();
                }
            });

            // New handler for initial states
            connection.on("ReceiveInitialStates", (states) => {
                states.forEach(state => {
                    // Update count
                    const countElement = document.getElementById(`foto${state.songId}`);
                    if (countElement) {
                        countElement.textContent = state.count;
                    }

                    // Update heart icon
                    const heart = document.getElementById(`heart-${state.songId}`);
                    if (heart) {
                        heart.src = state.liked ? "/assets/icons/heart_filled.png" : "/assets/icons/heart_empty.png";
                        heart.dataset.liked = state.liked.toString();
                    }
                });
            });

            console.log("SignalR Connected.");
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };

    // when like button is pressed
    function updateGosto(idMusica) {
        const heart = document.getElementById(`heart-${idMusica}`);
        // Immediately toggle visual state for responsiveness
        if (heart) {
            const isLiked = heart.dataset.liked === 'true';
            heart.src = isLiked ? "/assets/icons/heart_empty.png" : "/assets/icons/heart_filled.png";
            heart.dataset.liked = (!isLiked).toString();
        }
        connection.invoke("AtualizarGostos", idMusica);
    }

    // start the connection.
    start();
</script>