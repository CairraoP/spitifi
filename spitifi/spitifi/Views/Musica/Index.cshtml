@using spitifi.Models.DbModels
@model Page<spitifi.Models.DbModels.Musica>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Index";
    // since the page model isn't the music dbModel but a paginator, we can't access the music displayname from anywhere
    // this dumbItem allows to use the Musica Model attributes
    var dumbitem = new Musica();
}

<h1>Músicas</h1>

<table class="table" style="color:white">
    <thead>
    <tr>
        <th> Gostos </th>
        <th> Capa do Albúm </th>
        <th>
            @Html.DisplayNameFor(model => dumbitem.Nome)
        </th>
        <th>
            @Html.DisplayNameFor(model => dumbitem.Album.Titulo)
        </th>
        <th>Opções</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model)
    {
        <tr data-song-id="@item.Id"
            data-song-name="@item.Nome"
            data-album-art="@item.Album.Foto"
            data-artist="@item.Dono.Username"
            data-file-path="@item.FilePath">

            <td>
                @if (User.Identity.IsAuthenticated)
                {
                    <!-- Add data attribute for initial liked state -->
                    <img id="heart-@item.Id"
                         src="@(item.ListaGostos.Any(g => g.Utilizador.Username == User.Identity.Name) ? "/assets/icons/heart_filled.png" : "/assets/icons/heart_empty.png")"
                         onclick="updateGosto(@item.Id)"
                         style="cursor: pointer; width: 24px; height: 24px;"
                         data-liked="@(item.ListaGostos.Any(g => g.Utilizador.Username == User.Identity.Name).ToString().ToLower())"/>
                }
                <p id=@("foto" + item.Id)>@item.ListaGostos.Count()</p>

            </td>

            <td>
                <img style="max-height: 100px; max-width: 100px"
                     src="@item.Album.Foto" 
                     onerror="this.onerror=null; this.src='/assets/icons/musicPlaceholder.png'"/>
            </td>
            <td>
                @System.IO.Path.GetFileNameWithoutExtension(item.Nome)
                <br/>
                @Html.DisplayFor(modelItem => item.Dono.Username)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Album.Titulo)
            </td>
            <td>
                <a asp-action="Details" asp-route-id="@item.Id">Detalhes</a>
            </td>
        </tr>
    }
    </tbody>
</table>

<!-- Pagination controls -->
<div class="pagination">
    @if (Model.HasPreviousPage)
    {
        <a asp-action="Index"
           asp-route-pageNumber="@(Model.PageIndex - 1)"
           asp-route-pageSize="@Model.PageSize">
            <b>Anterior</b>
        </a>
    }
    &nbsp
    <span>Página @Model.PageIndex de @Model.TotalPages </span>
    &nbsp
    @if (Model.HasNextPage)
    {
        <a asp-action="Index"
           asp-route-pageNumber="@(Model.PageIndex + 1)"
           asp-route-pageSize="@Model.PageSize">
            <b>Próxima</b>
        </a>
    }
</div>
<style>
    select[name="pageSize"] {
        background-color: #333;
        color: white;
        padding: 8px 12px;
        border: 1px solid #555;
        border-radius: 4px;
        cursor: pointer;
    }

    select[name="pageSize"] option {
        background-color: #444;
        color: white;
    }

    select[name="pageSize"]:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    }
</style>
<form asp-action="Index" method="get">
    <label>Músicas por páginas: </label>
    <select name="pageSize" onchange="this.form.submit()">
        <option value="5" selected="@(Model.PageSize == 5)">5</option>
        <option value="10" selected="@(Model.PageSize == 10)">10</option>
        <option value="25" selected="@(Model.PageSize == 25)">25</option>
        <option value="50" selected="@(Model.PageSize == 50)">50</option>
    </select>
    <input type="hidden" name="pageNumber" value="1"/>
</form>


<script>
    // Function to build playlist from current page
    function buildPlaylist() {
        const playlist = [];
        const rows = document.querySelectorAll('tbody tr');

        rows.forEach(row => {
            playlist.push({
                id: row.dataset.songId,
                name: row.dataset.songName,
                albumArt: row.dataset.albumArt,
                artist: row.dataset.artist,
                filePath: row.dataset.filePath
            });
        });

        return playlist;
    }

    document.addEventListener('DOMContentLoaded', function() {
        const rows = document.querySelectorAll('tbody tr');

        rows.forEach(row => {
            row.addEventListener('click', function(event) {
                // Ignore clicks on like button and audio elements
                if (event.target.closest('img[id^="heart-"]')) return;
                if (event.target.closest('audio')) return;

                const playlist = buildPlaylist();
                const songId = row.dataset.songId;

                // Find index of clicked song
                const songIndex = playlist.findIndex(song => song.id === songId);
                if (songIndex === -1) return;

                // Initialize or update player
                if (!window.musicPlayer) {
                    initPlayer(playlist);
                }
                window.musicPlayer.playTrack(songIndex);
            });
        });
    });

    // Initialize the music player
    function initPlayer(playlist) {
        window.musicPlayer = {
            playlist: playlist,
            currentIndex: 0,
            audioPlayer: document.getElementById('footerAudioPlayer'),
            playMode: 'once',

            playTrack: function(index) {
                if (index < 0 || index >= this.playlist.length) return;

                this.currentIndex = index;
                const track = this.playlist[index];

                // Update display
                document.getElementById('footerSongName').textContent = 
                    track.name.substring(0, track.name.lastIndexOf('.'));
                document.getElementById('footerArtist').textContent = track.artist;
                document.getElementById('footerAlbumArt').src = track.albumArt;
                
                // Set fallback for album art
                document.getElementById('footerAlbumArt').onerror = function() {
                    this.src = '/assets/icons/musicPlaceholder.png';
                };

                // Update audio source
                this.audioPlayer.innerHTML = '';
                const source = document.createElement('source');
                source.src = track.filePath;

                if (track.filePath.endsWith('.wav')) {
                    source.type = 'audio/wav';
                } else if (track.filePath.endsWith('.mp3')) {
                    source.type = 'audio/mp3';
                }

                this.audioPlayer.appendChild(source);
                this.audioPlayer.load();
                this.audioPlayer.play();

                // Show player
                const container = document.getElementById('audioContainer');
                container.classList.add('show');

            },

            nextTrack: function() {
                let nextIndex = this.currentIndex + 1;

                if (nextIndex >= this.playlist.length) {
                    if (this.playMode === 'loopPlaylist') nextIndex = 0;
                    else return; // Stop at end
                }
                this.playTrack(nextIndex);
            },

            prevTrack: function() {
                let prevIndex = this.currentIndex - 1;

                if (prevIndex < 0) {
                    if (this.playMode === 'loopPlaylist') prevIndex = this.playlist.length - 1;
                    else return; // Stop at start
                }
                this.playTrack(prevIndex);
            },

            setPlayMode: function(mode) {
                this.playMode = mode;
                this.audioPlayer.loop = (mode === 'loopTrack');
            }
        };

        // Set default play mode
        window.musicPlayer.setPlayMode('once');

        // Setup event listeners
        document.getElementById('prevBtn').addEventListener('click', () => {
            window.musicPlayer.prevTrack();
        });

        document.getElementById('nextBtn').addEventListener('click', () => {
            window.musicPlayer.nextTrack();
        });

        document.getElementById('playPauseBtn').addEventListener('click', () => {
            const icon = document.querySelector('#playPauseBtn i');
            if (window.musicPlayer.audioPlayer.paused) {
                window.musicPlayer.audioPlayer.play();
                icon.className = 'fas fa-pause';
            } else {
                window.musicPlayer.audioPlayer.pause();
                icon.className = 'fas fa-play';
            }
        });

        // Play mode selection
        document.querySelectorAll('input[name="playMode"]').forEach(radio => {
            radio.addEventListener('change', (e) => {
                window.musicPlayer.setPlayMode(e.target.value);
            });
        });

        // Handle track ending
        window.musicPlayer.audioPlayer.addEventListener('ended', () => {
            if (window.musicPlayer.playMode === 'loopPlaylist') {
                window.musicPlayer.nextTrack();
            } else if (window.musicPlayer.playMode === 'once') {
                window.musicPlayer.nextTrack();
            }
        });

        // Update play/pause button state
        window.musicPlayer.audioPlayer.addEventListener('play', () => {
            document.querySelector('#playPauseBtn i').className = 'fas fa-pause';
        });

        window.musicPlayer.audioPlayer.addEventListener('pause', () => {
            document.querySelector('#playPauseBtn i').className = 'fas fa-play';
        });
    }


<!-- script para fazer a ligação ao webSocket-->

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/likes")
        .withAutomaticReconnect()
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function start() {
        try {
            await connection.start();

            // Existing count update handler
            connection.on("AtualizarGostos", (idMusica, numGostos) => {
                document.getElementById("foto" + idMusica).innerHTML = numGostos;
            });

            // Like state update handler
            connection.on("AtualizarGostoState", (idMusica, isLiked) => {
                const heart = document.getElementById(`heart-${idMusica}`);
                if (heart) {
                    heart.src = isLiked ? "/assets/icons/heart_filled.png" : "/assets/icons/heart_empty.png";
                    heart.dataset.liked = isLiked.toString();
                }
            });

            // New handler for initial states
            connection.on("ReceiveInitialStates", (states) => {
                states.forEach(state => {
                    // Update count
                    const countElement = document.getElementById(`foto${state.songId}`);
                    if (countElement) {
                        countElement.textContent = state.count;
                    }

                    // Update heart icon
                    const heart = document.getElementById(`heart-${state.songId}`);
                    if (heart) {
                        heart.src = state.liked ? "/assets/icons/heart_filled.png" : "/assets/icons/heart_empty.png";
                        heart.dataset.liked = state.liked.toString();
                    }
                });
            });

            console.log("SignalR Connected.");
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };

    // when like button is pressed
    function updateGosto(idMusica) {
        const heart = document.getElementById(`heart-${idMusica}`);
        // Immediately toggle visual state for responsiveness
        if (heart) {
            const isLiked = heart.dataset.liked === 'true';
            heart.src = isLiked ? "/assets/icons/heart_empty.png" : "/assets/icons/heart_filled.png";
            heart.dataset.liked = (!isLiked).toString();
        }
        connection.invoke("AtualizarGostos", idMusica);
    }

    // start the connection.
    start();
</script>