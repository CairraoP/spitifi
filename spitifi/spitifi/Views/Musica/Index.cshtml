@model Page<spitifi.Data.DbModels.Musica>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Index";
    // since the page model isn't the music dbModel but a paginator we can't access the music displayname from anywhere
    //ths dumbItem allows to use the musica dbModel attributes
    var dumbitem = new spitifi.Data.DbModels.Musica();
}

<h1>Músicas</h1>

<table class="table" style="color:white">
    <thead>
    <tr>
        <th><!-- Foto do album --></th>
        <th>
            @Html.DisplayNameFor(model => dumbitem.Nome) <!-- Fixed -->
        </th>
        <th>
            @Html.DisplayNameFor(model => dumbitem.Album.Titulo) <!-- Fixed -->
        </th>
        <th>Opções</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model)  
    {
        <tr data-song-name="@item.Nome"
            data-album-art="@item.Album.Foto"
            data-artist="@item.Dono.Username"
            data-file-path="@item.FilePath">
            <td>
                <img style="max-height: 100px; max-width: 100px" src="@item.Album.Foto"/>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Nome)
                <br/>
                <span id="musicListArtistUsername">
                    @Html.DisplayFor(modelItem => item.Dono.Username)
                </span>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Album.Titulo)
            </td>
            <td>
                <a asp-action="Details" asp-route-id="@item.Id">Detalhes</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Apagar</a>
            </td>
        </tr>
    }
    </tbody>
</table>

<!-- Pagination controls -->
<div class="pagination">
    @if (Model.HasPreviousPage) {
        <a asp-action="Index" 
           asp-route-pageNumber="@(Model.PageIndex - 1)"
           asp-route-pageSize="@Model.PageSize">
            Previous
        </a>
    }
    
    <span>Page @Model.PageIndex of @Model.TotalPages</span>
    
    @if (Model.HasNextPage) {
        <a asp-action="Index" 
           asp-route-pageNumber="@(Model.PageIndex + 1)"
           asp-route-pageSize="@Model.PageSize">
            Next
        </a>
    }
</div>

<!-- Page size selector -->
<form asp-action="Index" method="get">
    <label>Items per page:</label>
    <select name="pageSize" onchange="this.form.submit()">
        <option value="5" selected="@(Model.PageSize == 5)">5</option>
        <option value="10" selected="@(Model.PageSize == 10)">10</option>
        <option value="25" selected="@(Model.PageSize == 25)">25</option>
        <option value="50" selected="@(Model.PageSize == 50)">50</option>
    </select>
    <input type="hidden" name="pageNumber" value="1" />
</form>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const rows = document.querySelectorAll('tbody tr');
        const audioContainer = document.getElementById('audioContainer');

        rows.forEach(row => {
            row.addEventListener('click', function (event) {
                // Ignore clicks on the audio player or its children
                if (event.target.closest('audio')) return;

                // Extract data attributes
                const songName = row.dataset.songName;
                const albumArt = row.dataset.albumArt;
                const artist = row.dataset.artist;
                const filePath = row.dataset.filePath;

                // Update footer content
                document.getElementById('footerSongName').textContent = songName;
                document.getElementById('footerArtist').textContent = artist;
                document.getElementById('footerAlbumArt').src = albumArt;

                // Update audio player
                const audioPlayer = document.getElementById('footerAudioPlayer');
                audioPlayer.innerHTML = `
                <source src="${filePath}" type="audio/wav">
                <source src="${filePath}" type="audio/mp3">
            `;
                audioPlayer.load();

                // Show the hidden footer container
                audioContainer.style.display = 'flex'; // or 'flex' depending on your layout
                audioContainer.classList.add('show');
            });
        });
    });
</script>