@using spitifi.Models.DbModels
@model Page<spitifi.Models.DbModels.Musica>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Index";
    // since the page model isn't the music dbModel but a paginator, we can't access the music displayname from anywhere
    // this dumbItem allows to use the Musica Model attributes
    var dumbitem = new Musica();
}

<h1>Músicas</h1>

<table class="table" style="color:white">
    <thead>
    <tr>
        <th><!-- like button --></th>
        <th><!-- Foto do album --></th>
        <th>
            @Html.DisplayNameFor(model => dumbitem.Nome)
        </th>
        <th>
            @Html.DisplayNameFor(model => dumbitem.Album.Titulo)
        </th>
        <th>Opções</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model)
    {
        <tr data-song-name="@item.Nome"
            data-album-art="@item.Album.Foto"
            data-artist="@item.Dono.Username"
            data-file-path="@item.FilePath">
            
            <td>
        @if (User.Identity.IsAuthenticated)
        {
            <!-- Add data attribute for initial liked state -->
            <img id="heart-@item.Id" 
                 src="@(item.ListaGostos.Any(g => g.Utilizador.Username == User.Identity.Name) ? "/assets/icons/heart_filled.png" : "/assets/icons/heart_empty.png")"
                 onclick="updateGosto(@item.Id)"
                 style="cursor: pointer; width: 24px; height: 24px;"
                 data-liked="@(item.ListaGostos.Any(g => g.Utilizador.Username == User.Identity.Name).ToString().ToLower())" />
        }
        <p id=@("foto" + item.Id)>@item.ListaGostos.Count()</p>
        
        <!--
        @if (User.Identity.IsAuthenticated)
        {
            <button onclick="updateGosto(@item.Id)" class="form-control">Like</button>
        }

        <p id=@("foto" + item.Id)>@item.ListaGostos.Count()</p>
        -->
            </td>
            
            <td>
                <img style="max-height: 100px; max-width: 100px" src="@item.Album.Foto"/>
            </td>
            <td>
                @System.IO.Path.GetFileNameWithoutExtension(item.Nome)
                <br/>
                @Html.DisplayFor(modelItem => item.Dono.Username)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Album.Titulo)
            </td>
            <td>
                <a asp-action="Details" asp-route-id="@item.Id">Detalhes</a>
            </td>
        </tr>
    }
    </tbody>
</table>

<!-- Pagination controls -->
<div class="pagination">
    @if (Model.HasPreviousPage)
    {
        <a asp-action="Index"
           asp-route-pageNumber="@(Model.PageIndex - 1)"
           asp-route-pageSize="@Model.PageSize">
            <b>Anterior</b>
        </a>
    }
    &nbsp
    <span>Página @Model.PageIndex de @Model.TotalPages </span>
    &nbsp
    @if (Model.HasNextPage)
    {
        <a asp-action="Index"
           asp-route-pageNumber="@(Model.PageIndex + 1)"
           asp-route-pageSize="@Model.PageSize">
            <b>Próxima</b>
        </a>
    }
</div>
<style>
    select[name="pageSize"] {
        background-color: #333;
        color: white;
        padding: 8px 12px;
        border: 1px solid #555;
        border-radius: 4px;
        cursor: pointer;
    }

    select[name="pageSize"] option {
        background-color: #444;
        color: white;
    }

    select[name="pageSize"]:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    }
</style>
<form asp-action="Index" method="get">
    <label>Músicas por páginas: </label>
    <select name="pageSize" onchange="this.form.submit()">
        <option value="5" selected="@(Model.PageSize == 5)">5</option>
        <option value="10" selected="@(Model.PageSize == 10)">10</option>
        <option value="25" selected="@(Model.PageSize == 25)">25</option>
        <option value="50" selected="@(Model.PageSize == 50)">50</option>
    </select>
    <input type="hidden" name="pageNumber" value="1"/>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const rows = document.querySelectorAll('tbody tr');
        const audioContainer = document.getElementById('audioContainer');

        rows.forEach(row => {
            row.addEventListener('click', function (event) {
                // Ignore clicks on the audio player or its children
                if (event.target.closest('audio')) return;

                // Extract data attributes
                const songName = row.dataset.songName;
                const albumArt = row.dataset.albumArt;
                const artist = row.dataset.artist;
                const filePath = row.dataset.filePath;

                // Update footer content
                document.getElementById('footerSongName').textContent = songName;
                document.getElementById('footerArtist').textContent = artist;
                document.getElementById('footerAlbumArt').src = albumArt;

                // Update audio player
                const audioPlayer = document.getElementById('footerAudioPlayer');
                audioPlayer.innerHTML = `
                <source src="${filePath}" type="audio/wav">
                <source src="${filePath}" type="audio/mp3">
            `;
                audioPlayer.load();

                // Show the hidden footer container
                audioContainer.style.display = 'flex'; // or 'flex' depending on your layout
                audioContainer.classList.add('show');
            });
        });
    });

<!-- script para fazer a ligação ao webSocket-->

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/likes")
        .withAutomaticReconnect()
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function start() {
        try {
            await connection.start();

            // Existing count update handler
            connection.on("AtualizarGostos", (idMusica, numGostos) => {
                document.getElementById("foto" + idMusica).innerHTML = numGostos;
            });

            // Like state update handler
            connection.on("AtualizarGostoState", (idMusica, isLiked) => {
                const heart = document.getElementById(`heart-${idMusica}`);
                if (heart) {
                    heart.src = isLiked ? "/assets/icons/heart_filled.png" : "/assets/icons/heart_empty.png";
                    heart.dataset.liked = isLiked.toString();
                }
            });

            // New handler for initial states
            connection.on("ReceiveInitialStates", (states) => {
                states.forEach(state => {
                    // Update count
                    const countElement = document.getElementById(`foto${state.songId}`);
                    if (countElement) {
                        countElement.textContent = state.count;
                    }

                    // Update heart icon
                    const heart = document.getElementById(`heart-${state.songId}`);
                    if (heart) {
                        heart.src = state.liked ? "/assets/icons/heart_filled.png" : "/assets/icons/heart_empty.png";
                        heart.dataset.liked = state.liked.toString();
                    }
                });
            });

            console.log("SignalR Connected.");
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };

    function updateGosto(idMusica) {
        const heart = document.getElementById(`heart-${idMusica}`);
        // Immediately toggle visual state for responsiveness
        if (heart) {
            const isLiked = heart.dataset.liked === 'true';
            heart.src = isLiked ? "/assets/icons/heart_empty.png" : "/assets/icons/heart_filled.png";
            heart.dataset.liked = (!isLiked).toString();
        }
        connection.invoke("AtualizarGostos", idMusica);
    }

    // start the connection.
    start();
</script>