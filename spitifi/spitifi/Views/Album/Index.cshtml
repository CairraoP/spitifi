@using spitifi.Models.DbModels
@model Page<spitifi.Models.DbModels.Album>

@{
    ViewData["Title"] = "Index";
    // since the page model isn't the music dbModel but a paginator we can't access the music displayname from anywhere
    //ths dumbItem allows to use the musica dbModel attributes
    var dumbitem = new Album();

}

<h1>Albúms</h1>

<!-- Container for Cards -->
<div class="album-cards-container">
    @foreach (var item in Model)
    {
        <div class="album-card">
            <div class="album-card-header">
                <img src="/@item.Foto" alt="Album Image"/>
            </div>
            <div class="album-card-body">
                <h5 class="album-title">@Html.DisplayFor(modelItem => item.Titulo)</h5>
                <p class="album-artist">@Html.DisplayFor(modelItem => item.Dono.Username)</p>
            </div>
            <div class="album-card-footer">
                <a class="btn btn-primary" asp-action="Details" asp-route-id="@item.Id">Detalhes</a>
                @if (User.Identity?.Name == item.Dono?.Username)
                {
                    <a class="btn btn-secondary" asp-action="Edit" asp-route-id="@item.Id">Editar</a>
                    <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.Id">Apagar</a>
                }
            </div>
        </div>
    }
</div>




<!-- controlos de paginação -->
<div class="pagination-squares">
    @if (Model.HasPreviousPage)
    {
        <a asp-action="Index"
           asp-route-pageNumber="1"
           asp-route-pageSize="@Model.PageSize"
           title="First Page">
            &laquo;
        </a>
    }
    
    @for (int i = 1; i <= Model.TotalPages; i++)
    {
        <a asp-action="Index"
           asp-route-pageNumber="@i"
           asp-route-pageSize="@Model.PageSize"
           class="@(i == Model.PageIndex ? "active" : "")">
            @i
        </a>
    }
    
    @if (Model.HasNextPage)
    {
        <a asp-action="Index"
           asp-route-pageNumber="@Model.TotalPages"
           asp-route-pageSize="@Model.PageSize"
           title="Last Page">
            &raquo;
        </a>
    }
</div>

<style>
    .pagination-squares {
        display: flex;
        gap: 5px;
        flex-wrap: wrap;
        margin: 15px 0;
    }

    .pagination-squares a {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 35px;
        height: 35px;
        background-color: #333;
        color: white;
        text-decoration: none;
        border-radius: 4px;
        transition: all 0.3s ease;
    }

    .pagination-squares a:hover {
        background-color: #444;
        transform: translateY(-2px);
    }

    .pagination-squares a.active {
        background-color: #1DB954;
        font-weight: bold;
        transform: scale(1.1);
    }
</style>
<style>
    select[name="pageSize"] {
        background-color: #333;
        color: white;
        padding: 8px 12px;
        border: 1px solid #555;
        border-radius: 4px;
        cursor: pointer;
    }

    select[name="pageSize"] option {
        background-color: #444;
        color: white;
    }

    select[name="pageSize"]:focus {
        outline: none;
        border-color: #1db954;
        box-shadow: 0 0 0 2px rgba(29, 185, 84, 0.25);
    }
    select[name="pageSize"] option:hover {
        background-color: #1DB954 !important;
    }
</style>
<form asp-action="Index" method="get">
    <label>Albums por página: </label>
    <select name="pageSize" onchange="this.form.submit()">
        <option value="5" selected="@(Model.PageSize == 5)">5</option>
        <option value="10" selected="@(Model.PageSize == 10)">10</option>
        <option value="25" selected="@(Model.PageSize == 25)">25</option>
        <option value="50" selected="@(Model.PageSize == 50)">50</option>
    </select>
    <input type="hidden" name="pageNumber" value="1"/>
</form>